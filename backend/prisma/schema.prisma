// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  name        String?  @unique
  email       String?  @unique
  password    String
  image       String?
  likedDrinks Like[]
  role        UserRole @default(USER)

  @@map("users")
}

model Drink {
  id          String   @id @default(cuid())
  name        String?  @unique
  description String?
  price       Float
  size        Float
  stock       Int      @default(0)
  category    String
  sales       Int      @default(0)
  likedBy     Like[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Snack {
  id          String   @id @default(cuid())
  name        String?  @unique
  description String?
  price       Float
  stock       Int      @default(0)
  category    String
  sales       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  drink     Drink    @relation(fields: [drinkId], references: [id])
  drinkId   String
  createdAt DateTime @default(now())

  @@unique([userId, drinkId])
}

model PasswordResetToken {
  id      String   @unique @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model RequestToken {
  id      String   @unique @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum UserRole {
  ADMIN
  USER
}
